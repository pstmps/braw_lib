# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _bmd_metadata
else:
    import _bmd_metadata

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _bmd_metadata.delete_SwigPyIterator

    def value(self):
        return _bmd_metadata.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _bmd_metadata.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _bmd_metadata.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _bmd_metadata.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _bmd_metadata.SwigPyIterator_equal(self, x)

    def copy(self):
        return _bmd_metadata.SwigPyIterator_copy(self)

    def next(self):
        return _bmd_metadata.SwigPyIterator_next(self)

    def __next__(self):
        return _bmd_metadata.SwigPyIterator___next__(self)

    def previous(self):
        return _bmd_metadata.SwigPyIterator_previous(self)

    def advance(self, n):
        return _bmd_metadata.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _bmd_metadata.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _bmd_metadata.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _bmd_metadata.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _bmd_metadata.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _bmd_metadata.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _bmd_metadata.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _bmd_metadata:
_bmd_metadata.SwigPyIterator_swigregister(SwigPyIterator)
class StringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _bmd_metadata.StringMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _bmd_metadata.StringMap___nonzero__(self)

    def __bool__(self):
        return _bmd_metadata.StringMap___bool__(self)

    def __len__(self):
        return _bmd_metadata.StringMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _bmd_metadata.StringMap___getitem__(self, key)

    def __delitem__(self, key):
        return _bmd_metadata.StringMap___delitem__(self, key)

    def has_key(self, key):
        return _bmd_metadata.StringMap_has_key(self, key)

    def keys(self):
        return _bmd_metadata.StringMap_keys(self)

    def values(self):
        return _bmd_metadata.StringMap_values(self)

    def items(self):
        return _bmd_metadata.StringMap_items(self)

    def __contains__(self, key):
        return _bmd_metadata.StringMap___contains__(self, key)

    def key_iterator(self):
        return _bmd_metadata.StringMap_key_iterator(self)

    def value_iterator(self):
        return _bmd_metadata.StringMap_value_iterator(self)

    def __setitem__(self, *args):
        return _bmd_metadata.StringMap___setitem__(self, *args)

    def asdict(self):
        return _bmd_metadata.StringMap_asdict(self)

    def __init__(self, *args):
        _bmd_metadata.StringMap_swiginit(self, _bmd_metadata.new_StringMap(*args))

    def empty(self):
        return _bmd_metadata.StringMap_empty(self)

    def size(self):
        return _bmd_metadata.StringMap_size(self)

    def swap(self, v):
        return _bmd_metadata.StringMap_swap(self, v)

    def begin(self):
        return _bmd_metadata.StringMap_begin(self)

    def end(self):
        return _bmd_metadata.StringMap_end(self)

    def rbegin(self):
        return _bmd_metadata.StringMap_rbegin(self)

    def rend(self):
        return _bmd_metadata.StringMap_rend(self)

    def clear(self):
        return _bmd_metadata.StringMap_clear(self)

    def get_allocator(self):
        return _bmd_metadata.StringMap_get_allocator(self)

    def count(self, x):
        return _bmd_metadata.StringMap_count(self, x)

    def erase(self, *args):
        return _bmd_metadata.StringMap_erase(self, *args)

    def find(self, x):
        return _bmd_metadata.StringMap_find(self, x)

    def lower_bound(self, x):
        return _bmd_metadata.StringMap_lower_bound(self, x)

    def upper_bound(self, x):
        return _bmd_metadata.StringMap_upper_bound(self, x)
    __swig_destroy__ = _bmd_metadata.delete_StringMap

# Register StringMap in _bmd_metadata:
_bmd_metadata.StringMap_swigregister(StringMap)

def read_metadata(filename: str) -> dict:
    """
    Read metadata from a Blackmagic RAW (.braw) file.
    Args:
        filename: The path to the file to read.
    Returns:
        A dictionary of metadata.
    """
    metadata_raw = _bmd_metadata.read_metadata(filename)
    metadata = {}
    for key, value in metadata_raw.items():
        metadata[key] = (value.encode('utf-8', 'ignore').decode('utf-8'))
    return metadata
    # return _bmd_metadata.read_metadata(filename)

